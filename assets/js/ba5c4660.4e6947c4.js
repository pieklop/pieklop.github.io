"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9696],{3014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(4848),s=n(8453);const a={slug:"Flex Layout",title:"Flex Layout",authors:{name:"Tomasz Lech",title:"First creator of the website",url:"https://github.com/XToximX",image_url:"https://avatars.githubusercontent.com/u/162677728?v=4"},tags:["HTML","CSS","Layout"]},o="CSS Styling with Flexbox",l={permalink:"/blog/Flex Layout",source:"@site/blog/2024-04-25-flex-layout.md",title:"Flex Layout",description:"Flexbox is a powerful layout model in CSS that allows you to create flexible and efficient layouts. It's particularly handy for creating responsive designs and aligning items within a container.",date:"2024-04-25T00:00:00.000Z",tags:[{label:"HTML",permalink:"/blog/tags/html"},{label:"CSS",permalink:"/blog/tags/css"},{label:"Layout",permalink:"/blog/tags/layout"}],readingTime:1.325,hasTruncateMarker:!1,authors:[{name:"Tomasz Lech",title:"First creator of the website",url:"https://github.com/XToximX",image_url:"https://avatars.githubusercontent.com/u/162677728?v=4",imageURL:"https://avatars.githubusercontent.com/u/162677728?v=4"}],frontMatter:{slug:"Flex Layout",title:"Flex Layout",authors:{name:"Tomasz Lech",title:"First creator of the website",url:"https://github.com/XToximX",image_url:"https://avatars.githubusercontent.com/u/162677728?v=4",imageURL:"https://avatars.githubusercontent.com/u/162677728?v=4"},tags:["HTML","CSS","Layout"]},unlisted:!1,prevItem:{title:"Tables Layout",permalink:"/blog/Tables Layout"},nextItem:{title:"Grid Layout",permalink:"/blog/Grid Layout"}},r={authorsImageUrls:[void 0]},c=[{value:"Basics of Flexbox",id:"basics-of-flexbox",level:2},{value:"Setting up a Flex Container",id:"setting-up-a-flex-container",level:3},{value:"Flex Direction",id:"flex-direction",level:3},{value:"Justify Content",id:"justify-content",level:3},{value:"Align Items",id:"align-items",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Flexbox is a powerful layout model in CSS that allows you to create flexible and efficient layouts. It's particularly handy for creating responsive designs and aligning items within a container."}),"\n",(0,i.jsx)(t.h2,{id:"basics-of-flexbox",children:"Basics of Flexbox"}),"\n",(0,i.jsx)(t.p,{children:"Flexbox operates on two main axes: the main axis and the cross axis. You can control the layout of items along these axes using various properties."}),"\n",(0,i.jsx)(t.h3,{id:"setting-up-a-flex-container",children:"Setting up a Flex Container"}),"\n",(0,i.jsxs)(t.p,{children:["To create a flex container, you first need to set the ",(0,i.jsx)(t.code,{children:"display"})," property of the container to ",(0,i.jsx)(t.code,{children:"flex"}),". This tells the browser to use flex layout for the container's children."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".container {\n  display: flex;\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"flex-direction",children:"Flex Direction"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"flex-direction"})," property determines the main axis along which flex items are laid out. The default value is ",(0,i.jsx)(t.code,{children:"row"}),", which lays out items horizontally."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".container {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"justify-content",children:"Justify Content"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"justify-content"})," property aligns items along the main axis of the flex container. It's useful for distributing extra space when the items don't fill the container."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".container {\n  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"align-items",children:"Align Items"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"align-items"})," property aligns items along the cross axis of the flex container. It's handy for controlling vertical alignment of items within a container."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".container {\n  align-items: stretch | flex-start | flex-end | center | baseline;\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"Flexbox provides a flexible and efficient way to create layouts in CSS. By understanding and leveraging its properties, you can easily create responsive designs that adapt to different screen sizes and devices."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(6540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);